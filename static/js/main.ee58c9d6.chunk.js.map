{"version":3,"sources":["Stores/DataStore.js","Stores/RootStore.js","components/DashboardTile.jsx","components/HospitalCard.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DataStore","axios","get","response","transaction","_dataRegistry","data","console","error","Object","keys","this","length","fetchData","observable","rootStore","stores","dataStore","rootStoreContext","createContext","DashboardTile","title","total","newCases","icon","bg","DashboardTileStyles","Header","src","alt","New","Count","styled","div","props","background","p","HospitalCard","hospitalData","cumulative_local","cumulative_foreign","cumulative_total","treatment_local","treatment_foreign","treatment_total","hospital","HospitalCardStyles","name","CardData","App","observer","useContext","useEffect","initData","update_date_time","local_new_cases","local_total_cases","local_deaths","local_new_deaths","local_recovered","hospital_data","DashboardStyles","InfoContainer","HospitalListContainer","map","index","key","href","data-size","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ee58c9d6.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { observable, transaction } from \"mobx\";\nclass DataStore {\n\t@observable\n\t_dataRegistry = {};\n\tasync fetchData() {\n\t\ttry {\n\t\t\tconst response = await axios.get(\n\t\t\t\t\"https://hpb.health.gov.lk/api/get-current-statistical\"\n\t\t\t);\n\t\t\ttransaction(() => {\n\t\t\t\tthis._dataRegistry = response.data.data;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\tasync initData() {\n\t\tif (Object.keys(this._dataRegistry).length === 0) await this.fetchData();\n\t}\n}\n\nexport default DataStore;\n","import { createContext, useContext } from \"react\";\nimport DataStore from \"./DataStore\";\n\nclass RootStore {\n\tconstructor() {\n\t\tthis.stores = {\n\t\t\tdataStore: new DataStore()\n\t\t};\n\t}\n}\n\nconst rootStore = new RootStore();\n\nexport const rootStoreContext = createContext(rootStore);\nexport default rootStore;\nexport const useStore = () => useContext(rootStoreContext);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst DashboardTile = ({ title, total, newCases, icon, bg }) => {\n\treturn (\n\t\t<DashboardTileStyles bg={bg}>\n\t\t\t<Header>\n\t\t\t\t<img src={icon} alt=\"\" />\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t{newCases !== 0 && newCases && <New>+{newCases}</New>}\n\t\t\t</Header>\n\t\t\t<Count>{total}</Count>\n\t\t</DashboardTileStyles>\n\t);\n};\n\nexport default DashboardTile;\n\nconst DashboardTileStyles = styled.div`\n\twidth: 300px;\n\tborder-radius: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tmargin: 1rem;\n\tbox-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.14);\n\t${props => {\n\t\tswitch (props.bg) {\n\t\t\tcase \"warning\":\n\t\t\t\treturn {\n\t\t\t\t\tbackground: \"linear-gradient(to right, #f7971e, #ffd200); \"\n\t\t\t\t};\n\t\t\tcase \"danger\":\n\t\t\t\treturn {\n\t\t\t\t\tbackground: \"linear-gradient(to right, #ed213a, #93291e);  \"\n\t\t\t\t};\n\t\t\tcase \"success\":\n\t\t\t\treturn {\n\t\t\t\t\tbackground: \"linear-gradient(to right, #11998e, #38ef7d); \"\n\t\t\t\t};\n\t\t}\n\t}}\n`;\n\nconst Header = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tborder-bottom: 1px solid;\n\twidth: 100%;\n\th1 {\n\t\tfont-size: 26px;\n\t\tletter-spacing: 0;\n\t\tline-height: 19px;\n\t\tfont-weight: 320;\n\t\tmargin-right: auto;\n\t}\n\n\timg {\n\t\tpadding: 0 1rem;\n\t\theight: 32px;\n\t}\n`;\n\nconst New = styled.p`\n\tfont-size: 26px;\n\tletter-spacing: 0;\n\tline-height: 19px;\n\tfont-weight: 800;\n\tpadding: 0 1rem;\n`;\n\nconst Count = styled.p`\n\tfont-size: 50px;\n\tfont-weight: 400;\n\tletter-spacing: 0;\n\tline-height: 24px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst HospitalCard = ({ hospitalData }) => {\n\tconst {\n\t\tcumulative_local,\n\t\tcumulative_foreign,\n\t\tcumulative_total,\n\t\ttreatment_local,\n\t\ttreatment_foreign,\n\t\ttreatment_total,\n\t\thospital\n\t} = hospitalData;\n\n\treturn (\n\t\t<HospitalCardStyles>\n\t\t\t<h3> {hospital.name} </h3>\n\t\t\t<CardData>\n\t\t\t\t<div>\n\t\t\t\t\t<h4>Tested</h4>\n\t\t\t\t\t<p> Local : {cumulative_local} </p>\n\t\t\t\t\t<p> Foreign : {cumulative_foreign} </p>\n\t\t\t\t\t<p>Total : {cumulative_total} </p>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<h4>Treatment</h4>\n\t\t\t\t\t<p> local : {treatment_local} </p>\n\t\t\t\t\t<p> Foreign : {treatment_foreign} </p>\n\t\t\t\t\t<p>Total : {treatment_total} </p>\n\t\t\t\t</div>\n\t\t\t</CardData>\n\t\t</HospitalCardStyles>\n\t);\n};\n\nexport default HospitalCard;\n\nconst HospitalCardStyles = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\n\tmargin: 1rem;\n\tborder-radius: 6px;\n\tpadding: 1rem;\n\tbox-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.14);\n\n\tbackground: #4b6cb7; /* fallback for old browsers */\n\tbackground: -webkit-linear-gradient(\n\t\tto top,\n\t\t#182848,\n\t\t#4b6cb7\n\t); /* Chrome 10-25, Safari 5.1-6 */\n\tbackground: linear-gradient(\n\t\tto top,\n\t\t#182848,\n\t\t#4b6cb7\n\t); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n\th3 {\n\t\tpadding: 0 0.5rem;\n\t\ttext-align: center;\n\t\tmax-width: 300px;\n\t\tfont-weight: 300;\n\t}\n`;\n\nconst CardData = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-wrap: wrap;\n\n\tdiv {\n\t\twidth: 150px;\n\t\ttext-align: center;\n\t}\n`;\n","import React, { useEffect } from \"react\";\nimport { useStore } from \"./Stores/RootStore\";\nimport { observer } from \"mobx-react-lite\";\nimport DashboardTile from \"./components/DashboardTile\";\nimport styled from \"styled-components\";\nimport HospitalCard from \"./components/HospitalCard\";\nimport GitHubButton from \"react-github-btn\";\n\nconst App = observer(() => {\n\tconst { stores } = useStore();\n\tconst { dataStore } = stores;\n\n\tuseEffect(() => {\n\t\tdataStore.initData();\n\t}, []);\n\n\tconst {\n\t\tupdate_date_time,\n\t\tlocal_new_cases,\n\t\tlocal_total_cases,\n\t\tlocal_deaths,\n\t\tlocal_new_deaths,\n\t\tlocal_recovered,\n\t\thospital_data\n\t} = dataStore._dataRegistry;\n\n\treturn (\n\t\t<DashboardStyles>\n\t\t\t<h1>Sri Lanka COVID-19 Status</h1>\n\t\t\t<InfoContainer>\n\t\t\t\t<DashboardTile\n\t\t\t\t\tbg={\"warning\"}\n\t\t\t\t\ticon={\"icons/cases.svg\"}\n\t\t\t\t\ttitle=\"Cases\"\n\t\t\t\t\ttotal={local_total_cases}\n\t\t\t\t\tnewCases={local_new_cases}\n\t\t\t\t/>\n\n\t\t\t\t<DashboardTile\n\t\t\t\t\tbg={\"danger\"}\n\t\t\t\t\ticon={\"icons/deaths.svg\"}\n\t\t\t\t\ttitle=\"Deaths\"\n\t\t\t\t\ttotal={local_new_deaths}\n\t\t\t\t\tnewCases={local_deaths}\n\t\t\t\t/>\n\n\t\t\t\t<DashboardTile\n\t\t\t\t\tbg={\"success\"}\n\t\t\t\t\ticon={\"icons/recovered.svg\"}\n\t\t\t\t\ttitle=\"Recovered\"\n\t\t\t\t\ttotal={local_recovered}\n\t\t\t\t\tnewCases={null}\n\t\t\t\t/>\n\t\t\t</InfoContainer>\n\t\t\t<h2>Hospital Status</h2>\n\t\t\t<HospitalListContainer>\n\t\t\t\t{hospital_data &&\n\t\t\t\t\thospital_data.map((hospital, index) => {\n\t\t\t\t\t\treturn <HospitalCard hospitalData={hospital} key={index} />;\n\t\t\t\t\t})}\n\t\t\t</HospitalListContainer>\n\n\t\t\t<p>Last Updated : {update_date_time}</p>\n\t\t\t<p>Data Source : www.hpb.health.gov.lk </p>\n\n\t\t\t<GitHubButton\n\t\t\t\thref=\"https://github.com/dhanukaperera/sl-covid19-web\"\n\t\t\t\tdata-size=\"large\"\n\t\t\t\taria-label=\"Star dhanukaperera/sl-covid19-web on GitHub\"\n\t\t\t>\n\t\t\t\tStar\n\t\t\t</GitHubButton>\n\t\t</DashboardStyles>\n\t);\n});\n\nexport default App;\n\nconst DashboardStyles = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tpadding-bottom: 2rem;\n\n\th1 {\n\t\tpadding: 0 1rem;\n\t\ttext-align: center;\n\t}\n\n\th1,\n\th2 {\n\t\tfont-weight: 300;\n\t}\n`;\n\nconst InfoContainer = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: space-around;\n`;\n\nconst HospitalListContainer = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: space-evenly;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}